Pre-install: set a PREFIX
----------------------------
for Solaris:
export PREFIX=/export/home/apache-2.0.xx (where xx is the version you are
compiling)

for Linux:
export PREFIX=/usr/local/apache-2.0.xx (where xx is the version you are
compiling)

If you have any existing symlinks in place for your existing Apache install,
best remove them or they may get stomped.

Pre-install: create some lusers for various pieces of software to run as
------------------------------------------------------------------------
** for MySQL on all platforms:

shell> groupadd -g 775 mysql
shell> useradd -u 3010 -g mysql -d /export/home/mysql mysql

Change the above user/group ID's as needed

** Adding the Apache runtime users on Solaris:

shell> groupadd -g 710 webuser
shell> useradd -u 110 -g webuser -d /export/home/apache www

** Adding the Apache runtime users on Debian GNU/Linux:
shell> addgroup --gid 65533 httpd
shell> adduser --no-create-home --gid 65533 --uid 65533 \
		--disabled-password httpd
Adding user httpd...
Adding new user httpd (65533) with group httpd.
Home directory /home/httpd already exists.  Not copying from /etc/skel
Changing the user information for httpd
Enter the new value, or press return for the default
Full Name []: Apache Runtime User
Room Number []:
Work Phone []:
Home Phone []:
Other []:
Is the information correct? [y/n] y

MM (http://www.engelschall.com/sw/mm/#tarballs)
-----------------------------------------------
./configure --prefix=$PREFIX
#./configure (problems with apache finding libmm in the apache runtime tree?)
make
sudo make install

OpenSSL 0.9.7x (http://www.openssl.org/source/)
-----------------------------------------------
./config --prefix=$PREFIX shared

The 'shared' statement will make OpenSSL build shared libraries.  You want
this (see e-mail thread at the bottom of this file).

make
sudo make install

Apache 2.0.xx
-------------
unpack the tarball, cd into the source directory.  To get a full listing of
compile options you can set in Apache, use './configure --help'

Before you compile the main httpd binary with LDAP support, you'll need to
first compile the 'apr-util' with LDAP support as well:

cd $APACHE_SRC/srclib/apr-util
./configure --with-ldap --with-dbm=gdbm --with-apr=../apr
make

Then compile Apache:

./configure \
--prefix=$PREFIX --with-ssl=$PREFIX \
--enable-auth-dbm  --enable-auth-digest \
--enable-dav --enable-dav-fs \
--enable-info --enable-rewrite --enable-proxy \
--enable-ssl --enable-usertrack  --enable-vhost-alias \
--enable-static-htpasswd --enable-static-ab --enable-mods-shared=all \
--with-mpm=prefork

make
sudo make install

Change the User and Group in httpd.conf that the webserver will run as to the
user/group you created at the top of this file.

# --enable-example \ # for development only
# --enable-so \ # enabled when --enable-shared-mods is used as well
# --enable-ldap=/usr \ # having problems compiling ldap
# --enable-auth-ldap \ # having problems compiling ldap

For Apache 2.0.47 on Solaris, if you compile using GCC, some of the Apache
modules don't get linked correctly against libgcc.a.  This is because the
Apache coders use the GNU ld utility for linking modules, which doesn't come by
default on the reference system.  You can either link the culprit files by
hand, or install the GNU binutils and recompile.  See the below URL's for more
info and solutions:

http://perl.apache.org/docs/1.0/guide/troubleshooting.html#symbol___floatdisf__referenced_symbol_not_found
http://www.riverside.org/archive/html/new-httpd/2003-01/msg00051.html

For mod_ssl, chances are Apache won't link to the correct archived library
(libssl.a), and you'll have to re-link the file to create a new shared library.
(maybe go back in and rebuild the mod_ssl library with all of the lo files in
the ssl directory)

See also the OpenSSL thread at the bottom of this file.

IMAP 2004 (ftp://ftp.cac.washington.edu/imap/)
-----------------------------------------------
Unpack the IMAP tarball, then edit "src/osdep/unix/Makefile".  At the top of
that file, there are a bunch of SSL-related compile directives.  Change those
directives so that they match your SSL installation;
SSLDIR=/usr/local/apache2
SSLCERTS=$(SSLDIR)/ssl/certs
SSLKEYS=$(SSLCERTS)
SSLINCLUDE=$(SSLDIR)/include
SSLLIB=$(SSLDIR)/lib

then compile IMAP with:

make slx

Ming SWF Libraries (http://ming.sf.net)
---------------------------------------
Run 'make' in the ming source directory.  Copy 'libming.so' to /usr/local/lib
as 'libming.so.0', and create a symlink from that file to 'libming.so'. Copy
ming.h to /usr/local/include.

libxml2 (http://xmlsoft.org/sources/)
-------------------------------------
PHP 5.0.x wants recent versions of libxml2.  I can provide

-> libxml2
./configure --with-zlib --disable-static
-> libgpg-error (for libgcrypt, ftp://ftp.gnupg.org/gcrypt/libgpg-error/)
./configure --disable-static
-> libgcrypt (for libxslt, ftp://ftp.gnupg.org/gcrypt/libgcrypt/)
./configure --disable-static
-> libxlst (same website)
./configure --with-libxml-src=../libxml2-2.6.14 --disable-static


PHP 5.0.x (http://www.php.net/download)
---------------------------------------
Since PHP disables 'register_globals' by default, if you have an application
that uses global variables (variables read in from the HTTP server environment
and/or HTTP POST variables), you can tell Apache to enable 'register_globals'
on a per-directory basis.  Here's an example for PHP 4.3.x:

<Directory /path/to/some/php/application>
        <IfModule mod_php5.c>
            php_flag register_globals On
            php_flag magic_quotes_gpc On
            php_flag track_vars On
        </IfModule>
</Directory>

The trick is to grep for 'STANDARD20_MODULE_STUFF' in the PHP source to find
thename of the C source file that contains the above string.  Place the 
filename of that C source file in the IfModule directive above, and Apache will
then tell PHP to honor the directive for that directory. 

Built with Ming, MySQL and PostgreSQL, and GD drivers

# need oracle client package
# need zlib headers
# need gdbm headers
# need postresql-dev package, which has header files

./configure --prefix=$PREFIX \
--with-apxs2=$PREFIX/bin/apxs --with-config-file-path=$PREFIX/conf \
--with-gd --enable-gd-imgstrttf --with-freetype-dir=/usr \
--with-mysql --with-mysql-sock=/var/run/mysqld/mysqld.sock \
--enable-sqlite-utf8 --with-pgsql --with-zlib-dir=/lib \
--with-xml --with-pear --with-openssl=$PREFIX \
--with-gdbm --with-xpm-dir=/usr/X11R6 --with-gettext \
--enable--sysvsem --enable-sysvshm --enable-force-cgi-redirect \
--enable-calendar --enable-inline-optimization \
--enable-trans-sid --enable-track-var \
--with-imap=/usr/local/src/apache/imap \
--with-jpeg-dir=/usr/lib --with-png-dir=/usr/lib \
--with-ming --with-mm=$PREFIX/lib --disable-short-tags

make
sudo make install

OpenSSL Shared Libraries
------------------------
For Solaris, you'll need to build OpenSSL as shared libraries instead of static
libraries.  From the message:

http://www.mail-archive.com/modssl-users@modssl.org/msg15745.html

>> Yes, it's a fairly frequently asked question.  The problem is that
>> you've built a shared mod_ssl against a static OpenSSL (ie, libssl.a
>> and libcrypto.a instead of .so).  That won't work because the way the
>> build system currently works, OpenSSL is linked into httpd, not
>> mod_ssl.  httpd doesn't need the symbols from the OpenSSL libraries, so
>> the static linker throws them away, meaning they're no longer available
>> when mod_ssl is dynamically linked at runtime.
>>
>> Solution: use a shared OpenSSL.
>
> I was wondering how I use a shared OpenSSL.  I was wondering if you can
> point me to where I can find steps to do this or show me how.


I'm CC:'ing this to the modssl-users list, since I'm sure somebody else
out there probably has the same question.

It's kind of annoying, because the shared library support in OpenSSL is
"experimental", which in practice just means that the Makefile is
non-intuitive.  I just ran through it again to make sure I got all the
steps right... here's what you do.

I'm going to assume that you have the static version of OpenSSL installed
in /usr/local/lib in this example... just fix the path to match where
OpenSSL gets installed on your machine.

So let's say you've installed OpenSSL previously, but it's the static
version, so you have /usr/local/lib/libssl.a and
/usr/local/lib/libcrypto.a .  Remove those.

Go back to the OpenSSL source directory and do the following:

./config
make
make build-shared
mv libssl.so* /usr/local/lib
mv libcrypto.so* /usr/local/lib
ldconfig

(note: do NOT run make install, or it will remove all your shared
libraries and install the static ones, and you'll have to start over
again.  :-)

That ought to do it.  I recommend doing a search on your filesystem for
other, older copies of libssl* and libcrypto* that might be hanging
around, as sometimes copies get put in strange places and you want to be
sure to only have one: the most recent.

