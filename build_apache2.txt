Pre-install: set a PREFIX
----------------------------
This makes the instructions below work on any Unix-ish operating system, and
allows for easy relocation of things if you have different build priorities.

for Solaris:
export PREFIX=/export/home/apache-2.2.xx (where xx is the version you are
compiling)

for Debian Linux:
export PREFIX=/usr/local/stow
export PREFIX_SSL=$PREFIX
export PREFIX_SUPPORT=/usr/lib

for Mac OS X:
export PREFIX=/usr/local/stow/apache-2.2.xx 
export PREFIX_SSL=/opt/local/
export PREFIX_SUPPORT=/opt/local/lib

If you have any existing symlinks in place for your existing Apache install,
best remove them or they may get stomped.

Pre-install: create some lusers for various pieces of software to run as
------------------------------------------------------------------------
** for MySQL on all platforms:

shell> groupadd -g 775 mysql
shell> useradd -u 3010 -g mysql -d /export/home/mysql mysql

Change the above user/group ID's as needed

** Adding the Apache runtime users on Solaris:

shell> groupadd -g 710 webuser
shell> useradd -u 110 -g webuser -d /export/home/apache www

** Adding the Apache runtime users on Debian GNU/Linux:
shell> addgroup --gid 65533 httpd
shell> adduser --no-create-home --gid 65533 --uid 65533 \
		--disabled-password httpd
Adding user httpd...
Adding new user httpd (65533) with group httpd.
Home directory /home/httpd already exists.  Not copying from /etc/skel
Changing the user information for httpd
Enter the new value, or press return for the default
Full Name []: Apache Runtime User
Room Number []:
Work Phone []:
Home Phone []:
Other []:
Is the information correct? [y/n] y

MM (http://www.ossp.org/pkg/lib/mm/#tarballs)
-----------------------------------------------
NOTE: Apache doesn't use this anymore. PHP can use it as long as you're using a
non-threaded build of PHP.  The PHP build will exit with an error if you try to
include mm in a threaded build of PHP.

./configure --prefix=$PREFIX/mm-1.X --disable-static
make
make test (or 'time make test')
sudo make install

OpenSSL 1.0.0d (http://www.openssl.org/source/)
-----------------------------------------------
./config --prefix=$PREFIX/openssl-1.0.0d shared

The 'shared' statement will make OpenSSL build shared libraries.  See the
INSTALL file for why you want this set.

make
make test (or 'time make test')
sudo make install

Apache 2.2.14 (http://httpd.apache.org/download.cgi)
----------------------------------------------------
Setup:


Make sure you 'stow' OpenSSL prior to running this step.  Then unpack the
tarball, cd into the source directory.  To get a full listing of compile
options you can set in Apache, use './configure --help'.

./configure \
--prefix=/usr/local/stow/httpd-2.2.17 --with-ssl=/usr/local \
--enable-modules=all --enable-mods-shared=all \
--enable-v4-mapped --enable-authn-dbm --enable-authn-anon \
--enable-authn-dbd --enable-authn-alias --enable-authz-dbm \
--enable-authz-owner --enable-auth-digest --enable-authnz-ldap \
--with-ldap=ldap \
--enable-file-cache --enable-cache --enable-disk-cache --enable-mem-cache \
--enable-dbd --enable-echo --enable-deflate --enable-mime-magic \
--enable-http --enable-dav --enable-info \
--enable-speling --enable-cgi --enable-dav-fs --enable-dav-lock \
--enable-vhost-alias --enable-rewrite --enable-so \
--with-mpm=prefork --enable-proxy --enable-proxy-connect \
--enable-proxy-ftp --enable-proxy-http --enable-ssl --enable-static-htpasswd 

make

When the above make bombs out, build the APR tool.  See
http://brent.kearneys.ca/2006/12/10/building-ldap-authentication-into-apache2/
for more info and the hows and whys.

cd srclib/apr
make clean
./configure --prefix=$PREFIX/httpd-2.2.17 --enable-threads \
--enable-other-child
make

cd ../apr-util
make clean
./configure --prefix=$PREFIX/httpd-2.2.17 --with-apr=../apr \
--with-ldap-lib=/usr/lib --with-ldap-include=/usr/include \
--with-ldap=ldap
make

sudo make install

Change the User and Group in httpd.conf that the webserver will run as to the
user/group you created at the top of this file.

PHP 5.2.x (http://www.php.net/download)
---------------------------------------
Since PHP disables 'register_globals' by default, if you have an application
that uses global variables (variables read in from the HTTP server environment
and/or HTTP POST variables), you can tell Apache to enable 'register_globals'
on a per-directory basis.  Here's an example for PHP 4.3.x:

<Directory /path/to/some/php/application>
        <IfModule mod_php5.c>
            php_flag register_globals On
            php_flag magic_quotes_gpc On
            php_flag track_vars On
        </IfModule>
</Directory>

The trick is to grep for 'STANDARD20_MODULE_STUFF' in the PHP source to find
thename of the C source file that contains the above string.  Place the 
filename of that C source file in the IfModule directive above, and Apache will
then tell PHP to honor the directive for that directory. 

# need: zlib-dev gdbm-dev postgresql-dev mysql-dev libxml2-dev
# libjpeg-dev libpng-dev libfreetype6-dev libmcrypt-dev libmcrypt4
# stow apache and openssl prior to running ./configure for php

./configure --prefix=$PREFIX/php-5.2.X --with-apxs2=/usr/local/bin/apxs \
--with-config-file-path=/etc/httpd \
--with-config-file-scan-dir=/etc/httpd --with-gd \
--with-freetype-dir=$PREFIX_SUPPORT --with-mysql=$PREFIX_SUPPORT \
--with-mysql-sock=/var/run/mysqld/mysqld.sock --enable-sqlite-utf8 \
--with-zlib-dir=$PREFIX_SUPPORT --with-pear --with-openssl=/usr/local \
--with-gdbm --with-gettext=$PREFIX_SSL --enable-sysvsem --enable-sysvshm \
--enable-force-cgi-redirect --enable-calendar --enable-inline-optimization \
--with-imap-ssl --with-jpeg-dir=$PREFIX_SUPPORT \
--with-png-dir=$PREFIX_SUPPORT --enable-exif --disable-short-tags \
--enable-sockets --with-mcrypt=$PREFIX_SUPPORT
make
sudo make install

Testing New Apache Installs
---------------------------
In order to make sure your new Apache install is happy, run the new httpd
binary with the '-t' switch, which tells the binary to test but don't run.
Example:

/usr/local/new/apache/bin/httpd -t -f /path/to/test/httpd.conf

If you leave the forward slash off of the front of the config file, the config
file will be searched for underneath the directory listed in the ServerRoot
configuration directive, whatever path was compiled into Apache.

If Apache is happy with your test config file, you can then remove the '-t'
switch above to start a test server.  You need to make sure that your test
server runs on a different port number than your production server, or the test
server will fail to start as it can't bind to a port that's already open
(opened by the production copy of Apache most likely).

---
Fun with SSL ciphers:
---
Want to use only decent encryption with your SSL virtual host?  Try this line
for SSLCipherSuite today!

SSLCipherSuite ALL:-EXP:-eNULL:-aNULL

ALL: use all encryption ciphers and authenication mechanisims
-EXP: except for encryption ciphers that are export grade (less than 40 bits in
length)
-DES: except for the DES encryption cipher, is moderately easy to break.  Note
that 3DES and DES are two different animals, 3DES is still considered 'secure'.
-eNULL: except for null encryption ciphers
-aNULL: except for null authentication mechanisims

To test the above, use the following with openssl:

openssl ciphers -v 'ALL:-EXP:-DES:-eNULL:-aNULL'

===========================
Shared memory file storage:
===========================
If your operating system supports shared memory (or in other words, ramdisks),
you can set up an area in the filesystem for storing temporary files.  Storing
things like PHP session data, and various Apache semaphores on a memory-based
disk system would speed things up a wee bit, plus, you don't need that crap
anyways, so machine reboots would purge that data from the system
automatically.

Here's a list of directives that would benefit from a shared memory ramdisk:
ssl.conf: SSLSessionCache         shm:/var/lib/apache/ssl_cache(512000)
ssl.conf: SSLMutex  file:/var/lib/apache/ssl_mutex
httpd.conf: ScoreBoardFile /var/lib/apache/httpd.scoreboard
php.ini: session.save_path = /var/lib/apache

Here's a sample entry from a Linux /etc/fstab file, which describes how the
tmpfs filesystem gets created at boottime:

apachetmp   /var/lib/apache tmpfs size=8M

OS X users can use the 'hdid' command to create a ramdisk.  See the hdid
manpage for more information.

Generating SSL certificates for signing by a CA
===============================================
For the initial SSL cert generation, you can use 'make certificate type=CUSTOM'
inside of Apache.  This will generate both the custom Certificate Authority
(CA) certificate (ca.crt) , and the server's certificate (server.crt).  Once
you have a CA certificate, you can sign more certificates.  There's a Perl
script inside of OpenSSL called 'CA.pl' that will do the work for you.
Here's how you use it:

$ perl CA.pl -newreq (You'll be prompted for a password for this new SSL key)

# You can see the details of this RSA private key via the command:
$ openssl rsa -noout -text -in newkey.pem

# And you could create a decrypted PEM version (not recommended) of this RSA
# private key via:

$ openssl rsa -in newkey.pem -out newkey.pem.unsecure

# sign the CSR with CA.pl

$ perl CA.pl -sign (You'll be prompted for the CA password)

# View the signed certificate

openssl x509 -noout -text -in newcert.pem

Creating a CA certificate
=========================
$ CA.pl -newca (You'll be prompted for a new CA key password)

# You can see the details of this RSA private key via the command

$ openssl rsa -noout -text -in /root/CA/private/cakey.pem

# And you can create a decrypted PEM version (not recommended) of this private
# key via:

$ openssl rsa -in ca.key -out ca.key.unsecure

Creating a self-signed SSL Cert for testing purposes
====================================================
openssl req -new -x509 -nodes -out server.crt -keyout server.key

### Older (unneeded) instructions; CA.pl does all this stuff now
# Create a RSA private key for your Apache server (will be Triple-DES
# encrypted and PEM formatted):
$ openssl genrsa -des3 -out server.key 1024
# You can see the details of this RSA private key via the command:
$ openssl rsa -noout -text -in server.key
# Create a Certificate Signing Request (CSR) with the server RSA private key
# (output will be PEM formatted):
$ openssl req -new -key server.key -out server.csr
# You can see the details of this CSR via the command
$ openssl req -noout -text -in server.csr
# create a PEM version for IIS
# in order for this to work, you need to generate a CSR within IIS, then copy
# it over to a machine with OpenSSL installed.  Sign the key using the sign.sh
# script above, then convert it to PEM format so IIS can read it again.
openssl x509 -in server.crt -out server.crt.pem -outform PEM
# Create a RSA private key for your CA (will be Triple-DES encrypted and
# PEM formatted):
$ openssl genrsa -des3 -out ca.key 1024
# Create a self-signed CA Certificate (X509 structure) with the RSA key of the 
# CA (output will be PEM formatted):
$ openssl req -new -x509 -days 365 -key ca.key -out ca.crt

