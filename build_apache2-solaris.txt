Pre-install of all software:
----------------------------
set a PREFIX:

for Solaris:
export PREFIX=/export/home/apache-2.0.xx (where xx is the version you are
compiling)

for Linux:
export PREFIX=/usr/local/apache-2.0.xx (where xx is the version you are
compiling)

If you have any existing symlinks in place for your existing Apache install,
best remove them or they may get stomped.

OpenSSL (http://www.openssl.org/source/)
----------------------------------------
./Configure <machine_type> --prefix=$PREFIX 

*OR*

./config --openssldir=$PREFIX/ssl

if you're not sure which one you need, read the docs. The ./config command
above will install everything into $PREFIX/ssl

make
sudo make install

To figure out what <machine_type> to use, just run the Configure script with no
arguments.  You'd want to make sure that you build with shared libraries, if
your platform supports this.  The 'config' script doesn't always get it right.

For Solaris, you'll need to build OpenSSL as shared libraries instead of static
libraries.  From the message:

http://www.mail-archive.com/modssl-users@modssl.org/msg15745.html
>> Yes, it's a fairly frequently asked question.  The problem is that
>> you've built a shared mod_ssl against a static OpenSSL (ie, libssl.a
>> and libcrypto.a instead of .so).  That won't work because the way the
>> build system currently works, OpenSSL is linked into httpd, not
>> mod_ssl.  httpd doesn't need the symbols from the OpenSSL libraries, so
>> the static linker throws them away, meaning they're no longer available
>> when mod_ssl is dynamically linked at runtime.
>>
>> Solution: use a shared OpenSSL.
>
> I was wondering how I use a shared OpenSSL.  I was wondering if you can
> point me to where I can find steps to do this or show me how.


I'm CC:'ing this to the modssl-users list, since I'm sure somebody else
out there probably has the same question.

It's kind of annoying, because the shared library support in OpenSSL is
"experimental", which in practice just means that the Makefile is
non-intuitive.  I just ran through it again to make sure I got all the
steps right... here's what you do.

I'm going to assume that you have the static version of OpenSSL installed
in /usr/local/lib in this example... just fix the path to match where
OpenSSL gets installed on your machine.

So let's say you've installed OpenSSL previously, but it's the static
version, so you have /usr/local/lib/libssl.a and
/usr/local/lib/libcrypto.a .  Remove those.

Go back to the OpenSSL source directory and do the following:

./config
make
make build-shared
mv libssl.so* /usr/local/lib
mv libcrypto.so* /usr/local/lib
ldconfig

(note: do NOT run make install, or it will remove all your shared
libraries and install the static ones, and you'll have to start over
again.  :-)

That ought to do it.  I recommend doing a search on your filesystem for
other, older copies of libssl* and libcrypto* that might be hanging
around, as sometimes copies get put in strange places and you want to be
sure to only have one: the most recent.


IMAP 2002e
----------
Unpack the IMAP tarball, then edit "src/osdep/unix/Makefile".  At the top of
that file, there are a bunch of SSL-related compile directives.  Change those
directives so that they match your SSL installation;
SSLDIR=/usr/lib/ssl
SSLCERTS=/etc/ssl/certs
SSLKEYS=$(SSLCERTS)
SSLINCLUDE=/usr/include/openssl
SSLLIB=$(SSLDIR)/lib

then compile IMAP with:

make slx

PostgreSQL 7.3.x (http://www.postgresql.org/mirrors-ftp.html)
----------------
PostgreSQL REQUIRES GNU make.  If you don't have it, you'll need to go get it
from Sunfreeware.com.  Also, you may need to reset some of the kernel's memory
parameters.  <http://postgresql.readysetnet.com/devel-corner/docs/admin/kernel-r
esources.html#SYSVIPC> will give you more dirt.

./configure --prefix=/export/home/postgres --with-openssl=/usr/local/ssl \
--with-includes=/usr/local/includes 

make
make install

adduser postgres (add the user to the system)
chown postgres /export/home/postgres/data
su - postgres
/export/home/postgres/bin/initdb -D /export/home/postgres/data

MySQL 3.23.xx (http://www.mysql.com/downloads/)
-----------------------------------------------
Use the following lines to configure/compile MySQL:

CC=gcc CFLAGS="-O3 -fno-omit-frame-pointer -mcpu=v8 -Wa,-xarch=v8plusa" \
CXX=gcc \ 
CXXFLAGS="-O3 -fno-omit-frame-pointer -felide-constructors -fno-exceptions \
-fno-rtti -mcpu=v8 -Wa,-xarch=v8plusa" \
./configure --prefix=/export/home/mysql \
--with-extra-charsets=complex --enable-thread-safe-client\
--enable-local-infile --enable-assembler --with-named-z-libs=no\
--with-named-curses-libs=-lcurses --disable-shared 

make
make install

The basic commands you must execute to install and use a MySQL binary
distribution are:

     shell> groupadd -g 775 mysql 
     shell> useradd -u 3010 -g mysql -d /export/home/mysql mysql
     shell> cd /usr/local
     shell> gunzip < /path/to/mysql-VERSION-OS.tar.gz | tar xvf -
     shell> ln -s full-path-to-mysql-VERSION-OS mysql
     shell> cd mysql
     shell> scripts/mysql_install_db
     shell> chown -R root  .
     shell> chown -R mysql data
     shell> chgrp -R mysql .
     shell> bin/mysqld_safe --user=mysql &
     or
     shell> bin/mysqld_safe --user=mysql &
     if you are running MySQL 4.x


Apache 2.0.xx
-------------
unpack the tarball, cd into the source directory.  To get a full listing of
compile options you can set in Apache, use './configure --help'

./configure \
--prefix=$PREFIX \
--enable-auth-dbm \
--enable-auth-digest \
--enable-example \
--enable-dav \
--enable-mem-cache \
--enable-usertrack \
--enable-ssl \
--enable-static-htpasswd \
--enable-static-ab \
--enable-mods-shared=all \
--with-mpm=worker

#--with-ssl=$PREFIX \

--with-ssl=$PREFIX doesn't work for some reason.  Check the apache
source/readme, see if you can figure out how to get Apache to use ssl libs that
are located in a different place than you expect


[observer][httpd-2.0.44 550] ./configure --prefix=$PREFIX \
> --enable-auth-dbm --enable-file-cache --enable-mem-cache \
> --enable-dav --enable-info --enable-cgi --enable-dav-fs \
> --enable-vhost-alias --enable-rewrite --enable-so --with-ssl \
> --with-mpm=prefork --enable-static-htpasswd --enable-static-ab \
> --enable-mods-shared=all


For Apache 2.0.47 on Solaris, if you compile using GCC, some of the Apache
modules don't get linked correctly against libgcc.a.  This is because the
Apache coders use the GNU ld utility for linking modules, which doesn't come by
default on the reference system.  You can either link the culprit files by
hand, or install the GNU binutils and recompile.  See the below URL's for more
info and solutions:

http://perl.apache.org/docs/1.0/guide/troubleshooting.html#symbol___floatdisf__referenced_symbol_not_found
http://www.riverside.org/archive/html/new-httpd/2003-01/msg00051.html

For mod_ssl, chances are Apache won't link to the correct archived library
(libssl.a), and you'll have to re-link the file to create a new shared library.
(maybe go back in and rebuild the mod_ssl library with all of the lo files in
the ssl directory)

Adding the Apache runtime users:

shell> groupadd -g 710 webuser
shell> useradd -u 110 -g webuser -d /export/home/apache www

PHP 4.3.2 (http://www.php.net/download)
---------------------------------------

# need oracle client package
# need zlib headers
# need gdbm headers

./configure --prefix=$PREFIX \
--with-apxs2=$PREFIX/bin/apxs \
--with-config-file-path=$PREFIX/conf \
--with-mysql \
--with-pgsql \
--with-zlib-dir=/lib \
--with-xml \
--with-openssl=$PREFIX/ssl \
--with-imap=/usr/local/src/apache/imap \
--with-gdbm \
--with-gettext \
--enable--sysvsem \
--enable-sysvshm \
--enable-force-cgi-redirect \
--enable-calendar \
--enable-inline-optimization \
--enable-trans-sid \
--enable-track-var

