Pre-install of all software:
----------------------------
set a PREFIX:

for Solaris:
export PREFIX=/export/home/apache-2.0.xx (where xx is the version you are
compiling)

for Linux:
export PREFIX=/usr/local/apache-2.0.xx (where xx is the version you are
compiling)

If you have any existing symlinks in place for your existing Apache install,
best remove them or they may get stomped.

OpenSSL (http://www.openssl.org/source/)
----------------------------------------
./Configure <machine_type> --prefix=$PREFIX
make
sudo make install

To figure out what <machine_type> to use, just run the Configure script with no
arguments.  You'd want to make sure that you build with shared libraries, if
your platform supports this.  The 'config' script doesn't always get it right.

PostgreSQL 7.3.x (http://www.postgresql.org/mirrors-ftp.html)
----------------
PostgreSQL REQUIRES GNU make.  If you don't have it, you'll need to go get it
from Sunfreeware.com.  Also, you may need to reset some of the kernel's memory
parameters.  <http://postgresql.readysetnet.com/devel-corner/docs/admin/kernel-r
esources.html#SYSVIPC> will give you more dirt.

./configure --prefix=/export/home/postgres --with-openssl=/usr/local/ssl \
--with-includes=/usr/local/includes 

make
make install

adduser postgres (add the user to the system)
chown postgres /export/home/postgres/data
su - postgres
/export/home/postgres/bin/initdb -D /export/home/postgres/data

MySQL 3.23.xx (http://www.mysql.com/downloads/)
-----------------------------------------------
Use the following lines to configure/compile MySQL:

CC=gcc CFLAGS="-O3 -fno-omit-frame-pointer -mcpu=v8 -Wa,-xarch=v8plusa" \
CXX=gcc \ 
CXXFLAGS="-O3 -fno-omit-frame-pointer -felide-constructors -fno-exceptions \
-fno-rtti -mcpu=v8 -Wa,-xarch=v8plusa" \
./configure --prefix=/export/home/mysql \
--with-extra-charsets=complex --enable-thread-safe-client\
--enable-local-infile --enable-assembler --with-named-z-libs=no\
--with-named-curses-libs=-lcurses --disable-shared 

make
make install

The basic commands you must execute to install and use a MySQL binary
distribution are:

     shell> groupadd -g 775 mysql 
     shell> useradd -u 3010 -g mysql -d /export/home/mysql mysql
     shell> cd /usr/local
     shell> gunzip < /path/to/mysql-VERSION-OS.tar.gz | tar xvf -
     shell> ln -s full-path-to-mysql-VERSION-OS mysql
     shell> cd mysql
     shell> scripts/mysql_install_db
     shell> chown -R root  .
     shell> chown -R mysql data
     shell> chgrp -R mysql .
     shell> bin/mysqld_safe --user=mysql &
     or
     shell> bin/mysqld_safe --user=mysql &
     if you are running MySQL 4.x


Apache 2.0.xx
-------------
unpack the tarball, cd into the source directory.  To get a full listing of
compile options you can set in Apache, use './configure --help'

./configure \
--prefix=$PREFIX \
--enable-auth-dbm \
--enable-example \
--enable-mem-cache \
--enable-usertrack \
--enable-ssl \
--with-ssl=$PREFIX \
--enable-static-htpasswd \
--enable-static-ab \
--enable-mods-shared=all \
--with-mpm=worker

[observer][httpd-2.0.44 550] ./configure --prefix=$PREFIX \
> --enable-auth-dbm --enable-file-cache --enable-mem-cache \
> --enable-dav --enable-info --enable-cgi --enable-dav-fs \
> --enable-vhost-alias --enable-rewrite --enable-so --with-ssl \
> --with-mpm=prefork --enable-static-htpasswd --enable-static-ab \
> --enable-mods-shared=all


For Apache 2.0.47 on Solaris, if you compile using GCC, some of the Apache
modules don't get linked correctly against libgcc.a.  This is because the
Apache coders use the GNU ld utility for linking modules, which doesn't come by
default on the reference system.  You can either link the culprit files by
hand, or install the GNU binutils and recompile.  See the below URL's for more
info and solutions:

http://perl.apache.org/docs/1.0/guide/troubleshooting.html#symbol___floatdisf__referenced_symbol_not_found
http://www.riverside.org/archive/html/new-httpd/2003-01/msg00051.html

For mod_ssl, chances are Apache won't link to the correct archived library
(libssl.a), and you'll have to re-link the file to create a new shared library.
(maybe go back in and rebuild the mod_ssl library with all of the lo files in
the ssl directory)

Adding the Apache runtime users:

shell> groupadd -g 710 webuser
shell> useradd -u 110 -g webuser -d /export/home/apache www

PHP 4.3.2 (http://www.php.net/download)
---------------------------------------

# need oracle client package

./configure --prefix=$PREFIX \
--with-apxs2=$PREFIX/bin/apxs \
--with-config-file-path=$PREFIX/conf \
--with-mysql \
--with-zlib=/lib \ # need zlib header
--with-xml \
--with-openssl=$PREFIX \
--with-gdbm \ # need gdbm headers
--with-gettext \
--enable--sysvsem \
--enable-sysvshm \
--enable-force-cgi-redirect \
--enable-calendar \
--enable-inline-optimization \
--enable-trans-sid \
--enable-track-var

==============================================
PHPWiki todos

- make admin user name 'tiki' with tiki's password
- set up a manningb account, move work stuff from personal wiki to work wiki
- make a list of things that we would want to keep track of for each machine we
  manage

