Building Apache, by Brian Manning - Last updated 14Nov2003

14Nov2003
-- added section on using tmpfs shared memory ramdisk for file storage

13Aug2003
-- updated to Apache 1.3.28
-- updated to PHP 4.2.3
-- updated to MM 1.3.0
-- added 1st build of Apache, for creating directories for other software
-- added instructions for making PHP use tmpfs space

10Oct2002
-- updated to Apache 1.3.27
-- updated to PHP 4.2.1
-- updated to MM 1.2.1
-- added Oracle support to PHP

20Jun2002
-- updated to Apache 1.3.26
-- updated to PHP 4.2.1
-- moved Apache conf directory out of the Apache install prefix tree, and moved
the PHP  .ini file to the new Apache config location as well

additions by Bob Hucik 14Oct2001
    --updated to Apache 1.3.22
    --added LanguagePrirority to Mozilla character encoding
    --added my version of PHP install/configure
    --added Ming and PDF Library to Optional PHP Packages
    --fixed a few typo's
---------------------------------------------------------------
Following is a listing of build steps for each part of Apache.  Anything past
Apache is optional.  This setup will get you enough stuff to run most webmail
clients out there, like TWIG (http://twig.screwdriver.net/) or IMP/HORDE
(http://www.horde.org).  More verbose instructions are at the bottom of this
document.

Preliminary
-----------
Download all the below listed packages that you want to use.  Place them all in
one directory, and unzip them.  This will be referred to the 'build' directory.
Inside the build directory, make symlinks to the directories containing the
source, as the source packages will be referred in these instructions by the
name of the directory without any version information.  For example, make a
symlink from 'apache-1.3.x' to 'apache' in the source directory.  The
destination of all the software will be the name of the Apache version; if you
are installing Apache 1.3.27 to /export/home, then the full path will be
/export/home/apache-1.3.27, and a symlink will be made from the install
directory to /export/home/apache.  Applications that are installed inside the
Apache tree will also use their full versions into the installation
directories, with symlink shortcuts. 

Set up the install environment
------------------------------
For the bash shell users:
export PREFIX=/usr/local/apache-1.3.28

Apache (1st Time - http://httpd.apache.org/dist/httpd/)
-------------------------------------------------------
# We do a basic configure and install of Apache first, so we have a place to
# install OpenSSL/libmm; that way, each apache install is self-contained, and
# can be removed without harming the rest of the system
./configure \
--prefix=$PREFIX \
--enable-module=most \
--enable-shared=max \
--enable-module=so

OpenSSL (http://www.openssl.org/source/)
----------------------------------------
./config --prefix=$PREFIX
make
sudo make install

MM (http://www.engelschall.com/sw/mm/#tarballs)
-----------------------------------------------
#./configure --prefix=$PREFIX
./configure (problems with apache finding libmm in the apache runtime tree?)
make
sudo make install

mod_ssl (http://www.modssl.org/source/)
---------------------------------------
See https://bugzilla.redhat.com/bugzilla/long_list.cgi?buglist=61030 for a
description on how to move the location of the shared memory semaphore file
'httpd.mm.$PID.sem'

See also http://www.modssl.org/docs/2.8/ssl_faq.html#ToC14 for the reason why
there's no shared memory file (httpd.mm.$PID.sem) configuration directive.

./configure \
--with-apache=../apache \
--with-ssl=$PREFIX \
--enable-shared=ssl

Upgrades to mod_ssl
-------------------
./configure \
--with-apxs=/usr/local/apache/bin \
--with-ssl=/usr/local \
--with-mm=/usr/local

make
sudo make install
make distclean

Apache (http://httpd.apache.org/dist/httpd/)
--------------------------------------------
SSL_BASE=$PREFIX \
EAPI_MM=/usr/local/src/apache/mm \
./configure \
--prefix=$PREFIX \
--enable-module=ssl \
--enable-module=most \
--enable-shared=max \
--enable-rule=EAPI \
--enable-rule=SHARED_CORE \
--enable-rule=SHARED_CHAIN \
--enable-module=so

make
make certificate TYPE=custom
sudo make install

Note: Mozilla's default character encoding type is 'en-US', which apache knows
nothing about.  So if you don't want Mozilla to come up with pages of
gobbledeygook, then you need to 'AddLanguage en-US .us' in the httpd.conf file
in Apache.  Same goes with en-UK and en-AU as well. Also you need to add
en-US as the first language in the LanguagePriority section.

===========================
Shared memory file storage:
===========================
If you have the Linux shared memory driver turned on (it's called tmpfs), you
can set up an area in the filesystem for storing temporary files.  Storing
things like PHP session data, and various Apache semaphores on a memory-based
disk system would speed things up a wee bit, plus, you don't need that crap
anyways, so machine reboots would purge that data from the system
automatically.

Here's a list of directives that would benefit from a shared memory ramdisk:
httpd.conf: SSLSessionCache         shm:/var/lib/apache/ssl_cache(512000)
httpd.conf: SSLMutex  file:/var/lib/apache/ssl_mutex
httpd.conf: ScoreBoardFile /var/lib/apache/httpd.scoreboard
php.ini: session.save_path = /var/lib/apache

Here's a sample entry from a Linux /etc/fstab file, which describes how the
tmpfs filesystem gets created at boottime:

apachetmp   /var/lib/apache tmpfs size=8M

See also the mod_ssl entry on EAPI above

IMAP (http://www.washington.edu/imap/)
----
make slx

MySQL (http://www.mysql.com/downloads/)
-----
The compile flags below are optional, but taken from the MySQL page at:
<http://www.mysql.com/documentation/mysql/bychapter/manual_Installing.html#configure_options>

CC=gcc CFLAGS="-O3" \
CXX=gcc CXXFLAGS="-O3 -felide-constructors -fno-exceptions -fno-rtti" \
./configure --prefix=/usr/local/mysql --with-low-memory --enable-assembler

If you have a ultra sparc, you can get 4 % more performance by adding "-mcpu=v8
-Wa,-xarch=v8plusa" to CFLAGS and CXXFLAGS. 

# So my ./configure is:

[logan5][root /export/home/build/mysql-3.23.38]$ CC=gcc CFLAGS="-O3 -mcpu=v8" \
CXX=gcc CXXFLAGS="-O3 -felide-constructors -fno-exceptions -fno-rtti -mcpu=v8" \
./configure --prefix=/export/home/mysql --with-low-memory --enable-assembler

# then:

make 
make test
make install

# Change the perms in the mysql directory:

chown -R root /export/home/mysql
chown -R mysql /export/home/mysql/var
chgrp -R mysql /export/home/mysql

# cd to your installed directory, in this case /export/home/mysql, then run
./bin/mysql_install_db

# this sets up MySQL's auth system.

# Log into mysql by using /export/home/mysql/bin/mysql, and enter the following:

mysql> set password for root@localhost = password('password');

-and-

mysql> set password for root@host.com = password('password');
 
 Copy the file 'mysql.server' to /etc/init.d as 'mysql', and make a symlink back
 from /etc/rc3.d to the file in /etc/init.d.  Also, to make the daemon run as
 user 'mysql', you'll need to add '--user=mysql' to the start) line in
 /etc/init.d/mysql.

 PostgreSQL (http://postgresql.readysetnet.com/sites.html) [mirror]
 ----------
 PostgreSQL REQUIRES GNU make.  Also, you may need to reset some of the kernel's memory parameters.  
 <http://postgresql.readysetnet.com/devel-corner/docs/admin/kernel-resources.html#SYSVIPC> will give you more dirt.

 adduser postgres (add the user to the system)
 su - postgres

 ./configure --prefix=/usr/local/pgsql \
 --with-openssl=/usr/local/ --enable-syslog
 make
 make install

 # initialize the data directory
 /usr/local/pgsql/bin/initdb -D /usr/local/pgsql/data

 # this will start the database with logging going to 'logfile'
 # use pg_ctl to start postgres from init scripts
 /usr/local/pgsql/bin/postmaster \
 -D /usr/local/pgsql/data >logfile 2>&1 &

 # create the test database
 /usr/local/pgsql/bin/createdb test

 # then open it up with the 'psql' command line client
 /usr/local/pgsql/bin/psql test

 If you want to run the regression tests, you can do so by going to the source
 directory and running 'make check' as the user 'postgres'.  Building postgres
 as the user 'postgres' is recommended if you plan to run the regression tests.
 If you build as root, then run the regression tests as 'postgres', the test
 won't be able to write over the files owned by root.

 I've created a PostgreSQL start/stop script that should come in handy, it's
 called 'postgres', and it should either live in the same CVS repository as this
 one, or in a repository called 'scripts'.  It will kill a database in both
 normal and immediate modes.

 To run Postgres in SSL mode, you'll need to put a 'server.key' and 'server.crt'
 in $PGSQL/data.  Otherwise, when you go to start the server, it won't start.


 PHP (http://www.php.net/downloads.php)
 See below for more details about this specific build as well as other software
 dependencies that PHP requires before it will build.  If you are building IMAP,
 you just have to 'make' the source, you don't have to install it, PHP pulls
 what it needs out of the source.
 --------
 
 ./configure \
 --prefix=$PREFIX \
 --with-apxs=$PREFIX/bin/apxs \
 --with-config-file-path=/usr/local/apacheconf \
 --with-gd \
 --enable-gd-imgstrttf \
 --with-mm=/usr/local/lib \
 --with-zlib \
 --with-zlib-dir=/usr/lib \
 --with-xml \
 --with-gdbm \
 --with-gettext \
 --with-openssl=/usr \
 --with-ldap=/usr \
 --enable-sysvsem \
 --enable-sysvshm \
 --enable-force-cgi-redirect \
 --enable-calendar \
 --enable-inline-optimization \
 --enable-trans-sid \
 --enable-track-vars \
 --with-imap=/usr/local/src/apache/imap \
 --with-mysql=/usr \
 --with-pgsql=/usr \
 --with-oci8 

# Another version
./configure  --prefix=/usr/local/apache-1.3.22
--with-apxs=/usr/local/apache-1.3.22/bin/apxs
--with-imap-ssl=/usr/local/src/imap  --with-mysql=/usr
--with-config-file-path=/usr/local/apache-1.3.22/conf  --with-gd
--with-pgsql=/usr  --with-mm=/usr/local/lib  --with-zlib
--with-zlib-dir=/usr/lib  --with-xml  --with-gdbm --with-openssl=/usr
--enable-sysvsem  --enable-sysvshm  --enable-force-cgi-redirect
--enable-calendar  --enable-inline-optimization  --enable-trans-sid
--enable-track-vars --with-jpeg-dir=/usr/lib --with-png-dir=/usr/lib
--with-xpm-dir=/usr/X11R6/lib

## Bob's version of his PHP install
 ./configure \
--prefix=/usr/local/apache-1.3.22 \
--with-apxs=/usr/local/apache-1.3.22/bin/apxs \
--with-imap=/home/lugz/web/imap-2001.RELEASE-CANDIDATE.1 \
--with-mysql=/usr/local/mysql \
--with-config-file-path=/usr/local/apache-1.3.22/conf \ 
--with-gd=/usr/lib \
--with-gd-dir=/usr/lib \
--with-mm=/usr/local/lib \
--with-zlib \
--with-zlib-dir=/usr/lib \
--with-xml \
--enable-gd-native-ttf \
--with-freetype-dir=/usr \
--with-xpm-dir=/usr/X11R6 \
--enable-gd-imgstrttf \
--with-jpeg-dir=/usr \
--with-png-dir=/usr \
--enable-inline-optimization \
--with-xml \
--with-openssl=/usr \
--with-gdbm \
--with-ldap=/usr/lib \
--enable-sysvsem \
--enable-sysvshm \ 
--enable-force-cgi-redirect \
--enable-calendar \
--enable-trans-sid \
--enable-track-vars \
--with-ming \
--with-pdflib 

make
make install

cp php.ini-dist /export/home/apache/conf/php.ini

Add the following directives to Apache's httpd.conf file:
AddType application/x-httpd-php .php
AddType application/x-httpd-php .php3
AddType application/x-httpd-php3-source .phps

And add the following types to the DirectoryIndex direcive:
index.php index.php3

After I built PHP, if I do configtest in Apache, it complains about not seeing
the libs for MySQL and PostgreSQL.  They're located under /export/home, so
they're not in the system's library path.  In Solaris, this is set in
/etc/profile, as LD_LIBRARY_PATH.  Copying libpq.so.?.? and
libmysqlclient.so.?.? to Apache's libexec directory fixed it's bitching, but
strangely adding the above paths did not.

mod_perl (http://perl.apache.org/)
-------
perl Makefile.PL \
USE_APXS=1 \
WITH_APXS=/usr/local/apache/bin/apxs \
EVERYTHING=1

make
make install

FastCGI (http://www.fastcgi.com)
-------
$PREFIX/bin/apxs -o mod_fastcgi.so -c *.c
sudo $PREFIX/bin/apxs -i -a -n fastcgi mod_fastcgi.so 
			
If you are using /usr/local/apacheconf as your config directory, make sure you
copy the mod_fastcgi directives from $PREFIX/conf/httpd.conf to
/usr/local/apacheconf/httpd.conf.

ModDAV (http://www.webdav.org/mod_dav/)
------
./configure --with-apxs=$PREFIX/bin/apxs

make
sudo make install

If you are using /usr/local/apacheconf as your config directory, make sure you
copy the mod_fastcgi directives from $PREFIX/conf/httpd.conf to
/usr/local/apacheconf/httpd.conf.

===============================================================
More Information
================================================================
These instructions will build everything but Apache and mod_ssl as DSO's, or in
Apache-speak, loadable modules.  Loadable modules are a good thing because if
you don't want to use the module, you can unload it.  And you can update each
module as new versions come out, that way you don't end up recompiling Apache
every time something new shows up.

Assumptions:
------------
You want to install Apache and all of it's junk in the /usr/local tree.  If
that is false, change everything below that says --prefix=/usr/local to
something you like instead.

Tips
----
1) unpack all of the tarballs into one directory. make sure that MySQL is
already installed

2) go into the individual directories, and run the configures/makes for all of
the pieces parts

3) watch those bash shell tab completions.  If it adds an extra forward slash
to the end of a directory name, you can bet it will fuck up the make scripts.

PHP
===
Assumption: you are either compiling IMAP from scratch, or are lucky enough to
have all of the dependencies that PHP is looking for.   

PHP Extra Module Requirements (Optional)
----------------------------------------
- gd graphics libs > 1.3.3 (both regular and devel packages)
(http://www.boutell.com/gd/#getgd)
-libjpeg (http://www.ijg.org/)
-libpng (http://www.libpng.org/pub/png/libpng.html)
-libungif (http://prtr-13.ucsc.edu/~badger/software/libungif/index.shtml)
-libXpm (ftp://ftp.x.org/contrib/libraries/)
- FreeType (http://freetype.sourceforge.net/download.html#freetype2)
- UW IMAP (compile from scratch, with notes below)
- gdbm database (including development package if you are installing from
  packages)
- bison package
- Ming Library (http://www.opaque.net/ming) Current version 0.2a
- PDF Library (http://www.pdflib.com) Current version 4.0.1

If you don't want to install IMAP over an extisting IMAP binary that's already
on your system, you can do the steps below:

>From the IMAP source directory, copy the src/c-client/mail.h, rfc822.h,
linkage.h to /usr/local/include; copy c-client.a  to /usr/local/lib, and do a
ln -s c-client.a libc-client.a

Copy the imapd/imapd.o file from the UW IMAP to the php-3.0.x/dl/imap/,
then run dl/setup, followed by dl/make imap.so.
Heed the instructions that it spits out after you run setup

Copy the imap.so shared library to /usr/local/lib, or wherever your
library files go to...

PHP Session Variables and RAMDISK
---------------------------------
Another good idea for PHP is to use a ramdisk to store session ID info, this
will remove the system drives from the equasion, and should really speed things
up.

To set up a ramdisk, your Linux kernel needs to have 'tmpfs' compiled; when you
issue the command 'cat /proc/filesystems | grep tmpfs', you should see
something output that has the word 'tmpfs' in it.  If you don't see any output,
you're not using tmpfs.  Once you have tmpfs 'installed', to use it, you just
issue the 'mount' command, and the kernel will build the filesystem in memory
right then.  For example, assuming you have a subdirectory called 'test' in the
current directory, you can create a tmpfs filesystem by issuing the following
command:

mount -t tmpfs -o size=4m testtmpfs test/

To make it more permanent, just add it to your system's /etc/fstab:

apachetmp   /var/lib/apache tmpfs size=8M                   0   0

This will create a filesystem called 'apachetmp' at /var/lib/apache, and it
will be 8 megabytes in size.  You could probably go much lower than this if you
have a infrequently visited site, or may need more if you get lots of traffic.
To get PHP to use 'apachetmp' as the place where it stores session files, open
up the php.ini file on your system, and make the following change:

; Argument passed to save_handler.  In the case of files, this is the path
; where data files are stored.
session.save_path = /var/lib/apache

Restart Apache with the new setup, and hit a PHP page that uses sessions, and
you should now see files in your tmpfs filesystem.

Adding the new user/group for Apache to run as
==============================================
[observer][root /usr/local/apache-1.3.22/conf]$ addgroup --gid 65533 httpd
Adding group httpd (65533)...
Done.
[observer][root /usr/local/apache-1.3.22/conf]$ adduser --no-create-home --gid
65533 --uid 65533 --disabled-password httpd
Adding user httpd...
Adding new user httpd (65533) with group httpd.
Home directory /home/httpd already exists.  Not copying from /etc/skel
Changing the user information for httpd
Enter the new value, or press return for the default
Full Name []: Apache Runtime User
Room Number []: 
Work Phone []: 
Home Phone []: 
Other []: 
Is the information correct? [y/n] y


Generating SSL certificates
===========================
For the initial SSL cert generation, you can use 'make certificate type=CUSTOM'
inside of Apache.  This will generate both the custom Certificate Authority
(CA) certificate (ca.crt) , and the server's certificate (server.crt).  Once
you have a CA certificate, you can sign more certificates.  There's a shell
script inside of mod_ssl called 'sign.sh' that will do the work for you.
Here's how you use it:

# Create a RSA private key for your Apache server (will be Triple-DES
# encrypted and PEM formatted):

$ openssl genrsa -des3 -out server.key 1024

# You can see the details of this RSA private key via the command:

$ openssl rsa -noout -text -in server.key

# And you could create a decrypted PEM version (not recommended) of this RSA
# private key via:

$ openssl rsa -in server.key -out server.key.unsecure

# Create a Certificate Signing Request (CSR) with the server RSA private key
# (output will be PEM formatted):

$ openssl req -new -key server.key -out server.csr

# You can see the details of this CSR via the command

$ openssl req -noout -text -in server.csr

# sign the CSR with sign.sh

$ sign.sh server.csr

# View the signed certificate

openssl x509 -noout -text -in server.crt

# create a PEM version for IIS
# in order for this to work, you need to generate a CSR within IIS, then copy
# it over to a machine with OpenSSL installed.  Sign the key using the sign.sh
# script above, then convert it to PEM format so IIS can read it again.

openssl x509 -in server.crt -out server.crt.pem -outform PEM

Creating a CA certificate
=========================
# Create a RSA private key for your CA (will be Triple-DES encrypted and
# PEM formatted):

$ openssl genrsa -des3 -out ca.key 1024

# You can see the details of this RSA private key via the command

$ openssl rsa -noout -text -in ca.key

# And you can create a decrypted PEM version (not recommended) of this private
# key via:

$ openssl rsa -in ca.key -out ca.key.unsecure

# Create a self-signed CA Certificate (X509 structure) with the RSA key of the 
# CA (output will be PEM formatted):

$ openssl req -new -x509 -days 365 -key ca.key -out ca.crt



